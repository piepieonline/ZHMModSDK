name: Build

on:
  push:
    branches:
      - master
  release:
    types: [ created ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build
    runs-on: [ windows-latest ]

    strategy:
      matrix:
        buildpreset: [ Release, Debug ]

    steps:
    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup VS environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Generate projects
      run: |
        cmake --preset x64-${{ matrix.buildpreset }} .

    - name: Build
      run: |
        cmake --build _build/x64-${{ matrix.buildpreset }} --parallel

    - name: Copy SDK and loader artifacts
      run: |
        cd _build/x64-${{ matrix.buildpreset }}
        mkdir _dist
        Copy-Item ZHMModSDK/ZHMModSDK.dll -Destination _dist/
        Copy-Item ZHMModSDK/ZHMModSDK.pdb -Destination _dist/
        Copy-Item DirectInputProxy/dinput8.dll -Destination _dist/
        Copy-Item DirectInputProxy/dinput8.pdb -Destination _dist/
        Copy-Item ../../LICENSE -Destination _dist/
        
    - name: Copy mod artifacts
      run: |
        cd _build/x64-${{ matrix.buildpreset }}
        mkdir _dist/mods
        Get-ChildItem -Directory Mods | ForEach-Object { Copy-Item (Join-Path $_.FullName ($_.Name + ".dll")) -Destination (Join-Path "_dist/mods"  ($_.Name + ".dll")) }
        Get-ChildItem -Directory Mods | ForEach-Object { Copy-Item (Join-Path $_.FullName ($_.Name + ".pdb")) -Destination (Join-Path "_dist/mods"  ($_.Name + ".pdb")) }

    - name: Copy SDK dev artifacts
      run: |
        cd _build/x64-${{ matrix.buildpreset }}
        mkdir _sdk
        mkdir _sdk/bin
        Copy-Item ZHMModSDK/ZHMModSDK.dll -Destination _sdk/bin/ZHMModSDK.dll
        Copy-Item ZHMModSDK/ZHMModSDK.lib -Destination _sdk/bin/ZHMModSDK.lib
        Copy-Item ZHMModSDK/ZHMModSDK.pdb -Destination _sdk/bin/ZHMModSDK.pdb
        Copy-Item ../../ZHMModSDK/Include/ -Destination _sdk/include -Recurse
        Copy-Item ../../External/imgui/source/imgui.h -Destination _sdk/include/imgui.h
        Copy-Item ../../External/imgui/source/imconfig.h -Destination _sdk/include/imconfig.h
        Copy-Item ../../External/spdlog/include/spdlog/ -Destination _sdk/include/spdlog -Recurse
        Copy-Item ../../CMakeLists.dist.txt -Destination _sdk/CMakeLists.txt
        Copy-Item ../../LICENSE -Destination _sdk/LICENSE

    - name: Archive SDK, loader, and mods
      uses: actions/upload-artifact@v2
      with:
        name: ZHMModSDK-${{ matrix.buildpreset }}
        path: |
          _build/x64-${{ matrix.buildpreset }}/_dist/*

    - name: Archive SDK dev package
      uses: actions/upload-artifact@v2
      with:
        name: DevPkg-ZHMModSDK-${{ matrix.buildpreset }}
        path: |
          _build/x64-${{ matrix.buildpreset }}/_sdk/*

  upload_release:
    name: Upload release artifacts
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        artifact: [ ZHMModSDK-Release, ZHMModSDK-Debug, DevPkg-ZHMModSDK-Release, DevPkg-ZHMModSDK-Debug ]

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}

    - name: Archive artifact files
      run: |
        cd ${{ matrix.artifact }}
        zip -r ${{ matrix.artifact }}.zip *
        
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact }}/${{ matrix.artifact }}.zip
        asset_name: ${{ matrix.artifact }}.zip
        asset_content_type: application/zip